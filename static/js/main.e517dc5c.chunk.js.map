{"version":3,"sources":["models/card.js","models/deck.js","cardview.js","pileview.js","waste_pile_view.js","game_view.js","App.js","index.js"],"names":["Card","suite","number","Object","classCallCheck","this","opened","heart","spade","diamond","club","anotherCard","Deck","cards","map","card","getSuite","getNumber","numberOfCards","splice","length","numbers","_","range","product","_ref","_ref2","slicedToArray","shuffle","CardView","props","possibleConstructorReturn","getPrototypeOf","call","isOpened","cardNumber","cardUnicodeNumber","color","getColor","cardOnclick","onClick","onClickClosedCard","style","className","isNullCard","nullCardOnClick","isSelected","react_default","a","createElement","id","String","fromCodePoint","getUnicode","React","Component","PileView","pile","_this","isPileEmpty","nullCard","push","cardViews","concat","lastSelectedCard","cardview","key","cardOnClick","onClickClosesCard","WastePileView","allCards","lastOpenedCard","last","openedCards","lastClosedCard","closedCards","lastOpenedCardId","getCardId","display","marginTop","marginLeft","marginRight","onClickDeck","onClickEmptyDeck","onClickedWastePileOpenedCard","GameView","state","deck","create","wastePileCards","_this2","setState","piles","Array","pileNumber","take","openLastCardOfPile","objectSpread","takeAll","initializePiles","initializeWastePile","card1","card2","rankToMatchWith","suiteToMatchWith","targetCard","isAlternateCard","areOfDifferentColors","isTargetANullCard","isLastCardKing","lastCard","undefined","open","findIndex","_card","equals","indexOfCard","getIndexOfCardInPile","remove","index","lastSelectedCardSource","isCardMoveable","pop","removeNullCard","targetId","lastSelectedCardId","_this3","_targetId$split","split","_targetId$split2","targetCardSuite","targetCardRank","targetPileId","_lastSelectedCardId$s","_lastSelectedCardId$s2","lastCardSuite","lastCardRank","lastPileId","toConsumableArray","lastSelectedCardPile","targetPile","find","doesCardMatch","isLastSelectedCardInWastePile","moveCardFromWastePileTo","removedCards","removeCardsInPileFrom","event","target","isACardAlreadySelected","pilesWithMovedCards","moveCards","cardToOpen","console","log","close","reverse","_this4","waste_pile_view","bind","pileview","onClickTableauCard","App","game_view","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e517dc5c.chunk.js","sourcesContent":["class Card {\n  constructor(suite, number) {\n    this.suite = suite;\n    this.number = number;\n    this.opened = false;\n  }\n\n  getSuite() {\n    return this.suite;\n  }\n\n  getNumber() {\n    return this.number;\n  }\n\n  open() {\n    this.opened = true;\n  }\n\n  close() {\n    this.opened = false;\n  }\n\n  isOpened() {\n    return this.opened;\n  }\n\n  getColor() {\n    const suiteColors = {\n      heart: 'red',\n      spade: 'black',\n      diamond: 'red',\n      club: 'black'\n    };\n    return suiteColors[this.suite];\n  }\n\n  equals(anotherCard) {\n    return this.number == anotherCard.number && this.suite == anotherCard.suite;\n  }\n}\n\nexport default Card;\n","import _ from 'lodash';\nimport 'lodash.product';\nimport Card from './card';\n\nclass Deck {\n  constructor(cards) {\n    this.cards = cards;\n  }\n\n  static create() {\n    const suites = ['spade', 'heart', 'diamond', 'club'];\n    const numbers = _.range(1, 14);\n    const cards = _.product(suites, numbers).map(\n      ([suite, number]) => new Card(suite, number)\n    );\n\n    return new Deck(_.shuffle(cards));\n  }\n\n  getCards() {\n    return this.cards.map(card => new Card(card.getSuite(), card.getNumber()));\n  }\n\n  take(numberOfCards) {\n    return this.cards.splice(0, numberOfCards);\n  }\n\n  takeAll() {\n    return this.cards.splice(0, this.cards.length);\n  }\n}\n\nexport default Deck;\n","import React from 'react';\nimport './index.css';\n\nclass CardView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isNullCard() {\n    return this.props.card.getNumber() === 0;\n  }\n\n  getUnicode() {\n    const card = this.props.card;\n\n    if (!card.isOpened()) {\n      return 127136;\n    }\n\n    const unicodes = {\n      heart: 127152,\n      spade: 127136,\n      diamond: 127168,\n      club: 127184\n    };\n\n    const cardNumber = card.getNumber();\n    const cardUnicodeNumber = cardNumber > 11 ? cardNumber + 1 : cardNumber;\n    const unicodeInDecimal = unicodes[card.getSuite()] + cardUnicodeNumber;\n\n    return unicodeInDecimal;\n  }\n\n  render() {\n    const card = this.props.card;\n    let color = card.isOpened() ? card.getColor() : 'black';\n    let cardOnclick = card.isOpened()\n      ? this.props.onClick\n      : this.props.onClickClosedCard;\n\n    const style = { color };\n    let className = 'card-container';\n\n    if (this.isNullCard()) {\n      className += ' null-card';\n      style.color = '#055b45';\n      cardOnclick = this.props.nullCardOnClick;\n    }\n\n    if (this.props.isSelected) {\n      className += ' selected-card';\n    }\n\n    return (\n      <div\n        className={className}\n        style={style}\n        id={this.props.id}\n        onClick={cardOnclick}\n      >\n        {String.fromCodePoint(this.getUnicode())}\n      </div>\n    );\n  }\n}\n\nexport default CardView;\n","import React from 'react';\nimport CardView from './cardview';\nimport Card from './models/card';\n\nclass PileView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isPileEmpty() {\n    return this.props.pile.length == 0;\n  }\n\n  render() {\n    const pile = this.props.pile;\n    if (this.isPileEmpty()) {\n      const nullCard = new Card('', 0);\n      pile.push(nullCard);\n    }\n\n    const cardViews = pile.map(card => {\n      const id = `${card.getSuite()}_${card.getNumber()}_${this.props.id}`;\n\n      const isSelected = id == this.props.lastSelectedCard;\n      return (\n        <CardView\n          card={card}\n          key={id}\n          id={id}\n          onClick={this.props.cardOnClick}\n          onClickClosesCard={null}\n          nullCardOnClick={this.props.cardOnClick}\n          isSelected={isSelected}\n        />\n      );\n    });\n    return <div className=\"pile\">{cardViews}</div>;\n  }\n}\n\nexport default PileView;\n","import React from 'react';\nimport CardView from './cardview';\nimport _ from 'lodash';\n\nclass WastePileView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getCardId(card) {\n    return `${card.getSuite()}_${card.getNumber()}_${this.props.id}`;\n  }\n\n  render() {\n    const allCards = this.props.cards;\n    const lastOpenedCard = _.last(allCards.openedCards);\n    const lastClosedCard = _.last(allCards.closedCards);\n\n    const lastOpenedCardId = this.getCardId(lastOpenedCard);\n    const isSelected = lastOpenedCardId == this.props.lastSelectedCard;\n\n    return (\n      <div style={{ display: 'flex', marginTop: '120px', marginLeft: '45px' }}>\n        <div style={{ marginRight: '10px' }}>\n          <CardView\n            card={lastClosedCard}\n            onClickClosedCard={this.props.onClickDeck}\n            nullCardOnClick={this.props.onClickEmptyDeck}\n          />\n        </div>\n        <div>\n          <CardView\n            card={lastOpenedCard}\n            key={lastOpenedCardId}\n            onClick={this.props.onClickedWastePileOpenedCard}\n            nullCardOnClick={null}\n            isSelected={isSelected}\n          />\n        </div>\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default WastePileView;\n","import React from 'react';\nimport Deck from './models/deck';\nimport _ from 'lodash';\nimport PileView from './pileview';\nimport Card from './models/card';\nimport WastePileView from './waste_pile_view';\n\nclass GameView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: Deck.create(),\n      lastSelectedCard: null,\n      wastePileCards: { openedCards: [], closedCards: [] }\n    };\n  }\n\n  initializePiles() {\n    this.setState(state => {\n      const piles = new Array(7);\n      for (let pileNumber = 0; pileNumber < piles.length; pileNumber++) {\n        piles[pileNumber] = state.deck.take(pileNumber + 1);\n        this.openLastCardOfPile(piles[pileNumber]);\n      }\n      return { ...state, piles };\n    });\n  }\n\n  initializeWastePile() {\n    this.setState(state => {\n      const nullCard = new Card('', 0);\n      const openedCards = [nullCard];\n\n      let closedCards = [nullCard];\n      closedCards = closedCards.concat(state.deck.takeAll());\n\n      return { ...state, wastePileCards: { openedCards, closedCards } };\n    });\n  }\n\n  componentWillMount() {\n    this.initializePiles();\n    this.initializeWastePile();\n  }\n\n  isACardAlreadySelected() {\n    return this.state.lastSelectedCard != null;\n  }\n\n  areOfDifferentColors(card1, card2) {\n    return card1.getColor() !== card2.getColor();\n  }\n\n  doesCardMatch(card, rankToMatchWith, suiteToMatchWith) {\n    return (\n      card.getSuite() == suiteToMatchWith && card.getNumber() == rankToMatchWith\n    );\n  }\n\n  isCardMoveable(targetCard, lastSelectedCard) {\n    const isAlternateCard =\n      this.areOfDifferentColors(targetCard, lastSelectedCard) &&\n      targetCard.getNumber() == lastSelectedCard.getNumber() + 1;\n\n    const isTargetANullCard = targetCard.getNumber() === 0;\n    const isLastCardKing = lastSelectedCard.getNumber() === 13;\n    const isKingOnEmptyPile = isTargetANullCard && isLastCardKing;\n    return isAlternateCard || isKingOnEmptyPile;\n  }\n\n  openLastCardOfPile(pile) {\n    const lastCard = _.last(pile);\n    if (lastCard == undefined) {\n      return;\n    }\n    lastCard.open();\n  }\n\n  getIndexOfCardInPile(card, pile) {\n    return _.findIndex(pile, _card => card.equals(_card));\n  }\n\n  removeCardsInPileFrom(card, pile) {\n    const indexOfCard = this.getIndexOfCardInPile(card, pile);\n    return _.remove(pile, (card, index) => index >= indexOfCard);\n  }\n\n  removeNullCard(cards) {\n    const nullCard = new Card('', 0);\n    _.remove(cards, card => card.equals(nullCard));\n  }\n\n  isLastSelectedCardInWastePile() {\n    return this.state.lastSelectedCardSource == 'WASTE_PILE';\n  }\n\n  isNullCard(card) {\n    return card.getNumber() === 0;\n  }\n\n  moveCardFromWastePileTo(pile, card) {\n    const lastSelectedCard = _.last(this.state.wastePileCards.openedCards);\n\n    if (this.isCardMoveable(card, lastSelectedCard)) {\n      this.state.wastePileCards.openedCards.pop();\n      pile.push(lastSelectedCard);\n      this.removeNullCard(pile);\n    }\n  }\n\n  moveCards(targetId, lastSelectedCardId) {\n    const [targetCardSuite, targetCardRank, targetPileId] = targetId.split('_');\n    const [lastCardSuite, lastCardRank, lastPileId] = lastSelectedCardId.split(\n      '_'\n    );\n\n    const piles = [...this.state.piles];\n    const lastSelectedCardPile = piles[lastPileId];\n    const targetPile = piles[targetPileId];\n\n    const targetCard = piles[targetPileId].find(card => {\n      return this.doesCardMatch(card, targetCardRank, targetCardSuite);\n    });\n\n    if (this.isLastSelectedCardInWastePile()) {\n      this.moveCardFromWastePileTo(targetPile, targetCard);\n      return piles;\n    }\n\n    const lastSelectedCard = piles[lastPileId].find(card => {\n      return this.doesCardMatch(card, lastCardRank, lastCardSuite);\n    });\n\n    if (!this.isCardMoveable(targetCard, lastSelectedCard)) {\n      return piles;\n    }\n\n    this.removeNullCard(targetPile);\n\n    const removedCards = this.removeCardsInPileFrom(\n      lastSelectedCard,\n      lastSelectedCardPile\n    );\n\n    piles[targetPileId] = targetPile.concat(removedCards);\n\n    this.openLastCardOfPile(lastSelectedCardPile);\n    return piles;\n  }\n\n  onClickTableauCard(event) {\n    const targetId = event.target.id;\n\n    if (this.isACardAlreadySelected()) {\n      const lastSelectedCardId = this.state.lastSelectedCard;\n      const pilesWithMovedCards = this.moveCards(targetId, lastSelectedCardId);\n      this.setState(state => {\n        return { ...state, piles: pilesWithMovedCards, lastSelectedCard: null };\n      });\n      return;\n    }\n\n    this.setState(state => {\n      return {\n        ...state,\n        lastSelectedCard: targetId,\n        lastSelectedCardSource: 'TABLEAU_PILE'\n      };\n    });\n  }\n\n  onClickDeck() {\n    this.setState(state => {\n      const cardToOpen = state.wastePileCards.closedCards.pop();\n      cardToOpen.open();\n      state.wastePileCards.openedCards.push(cardToOpen);\n      console.log('Aa rha h');\n      return state;\n    });\n  }\n\n  onClickEmptyDeck() {\n    this.setState(state => {\n      const openedCards = state.wastePileCards.openedCards;\n      const closedCards = openedCards\n        .splice(1, openedCards.length)\n        .map(card => {\n          card.close();\n          return card;\n        })\n        .reverse();\n\n      state.wastePileCards.closedCards = state.wastePileCards.closedCards.concat(\n        closedCards\n      );\n\n      return state;\n    });\n  }\n\n  onClickedWastePileOpenedCard(event) {\n    this.setState({\n      ...this.state,\n      lastSelectedCard: event.target.id,\n      lastSelectedCardSource: 'WASTE_PILE'\n    });\n  }\n\n  render() {\n    const { piles } = this.state;\n\n    return (\n      <div>\n        <WastePileView\n          cards={this.state.wastePileCards}\n          lastSelectedCard={this.state.lastSelectedCard}\n          onClickDeck={this.onClickDeck.bind(this)}\n          onClickEmptyDeck={this.onClickEmptyDeck.bind(this)}\n          onClickedWastePileOpenedCard={this.onClickedWastePileOpenedCard.bind(\n            this\n          )}\n        />\n        <div className=\"tableau\">\n          {piles.map((pile, index) => {\n            return (\n              <PileView\n                pile={pile}\n                id={index}\n                key={index}\n                cardOnClick={this.onClickTableauCard.bind(this)}\n                lastSelectedCard={this.state.lastSelectedCard}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameView;\n","import React, { Component } from 'react';\nimport GameView from './game_view';\n\nclass App extends Component {\n  render() {\n    return <GameView />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}