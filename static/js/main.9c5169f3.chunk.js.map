{"version":3,"sources":["models/card.js","models/deck.js","cardview.js","pileview.js","waste_pile_view.js","foundation_pile.js","foundation_piles.js","game_view.js","App.js","index.js"],"names":["Card","suite","number","Object","classCallCheck","this","opened","heart","spade","diamond","club","anotherCard","Deck","cards","map","card","getSuite","getNumber","numberOfCards","splice","length","numbers","_","range","product","_ref","_ref2","slicedToArray","shuffle","CardView","props","possibleConstructorReturn","getPrototypeOf","call","isOpened","cardNumber","cardUnicodeNumber","color","getColor","cardOnclick","onClick","onClickClosedCard","style","className","isNullCard","nullCardOnClick","isSelected","react_default","a","createElement","id","String","fromCodePoint","getUnicode","React","Component","PileView","pile","_this","isPileEmpty","nullCard","push","cardViews","concat","lastSelectedCard","cardview","key","cardOnClick","onClickClosesCard","WastePileView","allCards","lastOpenedCard","last","openedCards","lastClosedCard","closedCards","lastOpenedCardId","getCardId","display","marginLeft","marginRight","onClickDeck","onClickEmptyDeck","onClickedWastePileOpenedCard","FoundationPile","topCard","onClickFoundationPile","FoundationPiles","foundationPileViews","piles","index","foundation_pile","GameView","state","deck","create","lastSelectedCardId","wastePileCards","foundationPiles","_this2","setState","Array","pileNumber","take","openLastCardOfPile","objectSpread","takeAll","fill","e","initializePiles","initializeWastePile","initializeFoundationPiles","card1","card2","rankToMatchWith","suiteToMatchWith","targetCard","isAlternateCard","areOfDifferentColors","isLastCardKing","isKing","isKingOnEmptyPile","lastCard","undefined","open","findIndex","_card","equals","indexOfCard","getIndexOfCardInPile","remove","lastSelectedCardSource","isCardMoveable","pop","removeNullCard","isLastSelectedCardInWastePile","foundationPileId","cardToMovePileId","cardToMove","cardToMovePile","foundatioPile","isAce","isRankOneMoreThanTopCard","isOfSameSuite","event","_this3","isACardAlreadySelected","isLargeSelectedCardInTableau","target","_this$state$lastSelec","split","_this$state$lastSelec2","cardToMoveSuite","cardToMoveRank","findCardInTableauPile","canCardBeMovedToFoudationPile","moveCardToFoundationFile","pileId","cardRank","cardSuite","_this4","find","doesCardMatch","targetId","_targetId$split","_targetId$split2","targetCardSuite","targetCardRank","targetPileId","_lastSelectedCardId$s","_lastSelectedCardId$s2","lastCardSuite","lastCardRank","lastPileId","toConsumableArray","lastSelectedCardPile","targetPile","moveCardFromWastePileTo","removedCards","removeCardsInPileFrom","pilesWithMovedCards","moveCards","cardToOpen","close","reverse","_this5","justifyContent","marginTop","waste_pile_view","bind","foundation_piles","pileview","onClickTableauCard","App","game_view","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.9c5169f3.chunk.js","sourcesContent":["class Card {\n  constructor(suite, number) {\n    this.suite = suite;\n    this.number = number;\n    this.opened = false;\n  }\n\n  getSuite() {\n    return this.suite;\n  }\n\n  getNumber() {\n    return this.number;\n  }\n\n  open() {\n    this.opened = true;\n  }\n\n  close() {\n    this.opened = false;\n  }\n\n  isOpened() {\n    return this.opened;\n  }\n\n  getColor() {\n    const suiteColors = {\n      heart: 'red',\n      spade: 'black',\n      diamond: 'red',\n      club: 'black'\n    };\n    return suiteColors[this.suite];\n  }\n\n  equals(anotherCard) {\n    return this.number == anotherCard.number && this.suite == anotherCard.suite;\n  }\n\n  isAce() {\n    return this.number == 1;\n  }\n\n  isNullCard() {\n    return this.number == 0;\n  }\n\n  isKing() {\n    return this.number == 13;\n  }\n}\n\nexport default Card;\n","import _ from 'lodash';\nimport 'lodash.product';\nimport Card from './card';\n\nclass Deck {\n  constructor(cards) {\n    this.cards = cards;\n  }\n\n  static create() {\n    const suites = ['spade', 'heart', 'diamond', 'club'];\n    const numbers = _.range(1, 14);\n    const cards = _.product(suites, numbers).map(\n      ([suite, number]) => new Card(suite, number)\n    );\n\n    return new Deck(_.shuffle(cards));\n  }\n\n  getCards() {\n    return this.cards.map(card => new Card(card.getSuite(), card.getNumber()));\n  }\n\n  take(numberOfCards) {\n    return this.cards.splice(0, numberOfCards);\n  }\n\n  takeAll() {\n    return this.cards.splice(0, this.cards.length);\n  }\n}\n\nexport default Deck;\n","import React from 'react';\nimport './index.css';\n\nclass CardView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isNullCard() {\n    return this.props.card.getNumber() === 0;\n  }\n\n  getUnicode() {\n    const card = this.props.card;\n\n    if (!card.isOpened()) {\n      return 127136;\n    }\n\n    const unicodes = {\n      heart: 127152,\n      spade: 127136,\n      diamond: 127168,\n      club: 127184\n    };\n\n    const cardNumber = card.getNumber();\n    const cardUnicodeNumber = cardNumber > 11 ? cardNumber + 1 : cardNumber;\n    const unicodeInDecimal = unicodes[card.getSuite()] + cardUnicodeNumber;\n\n    return unicodeInDecimal;\n  }\n\n  render() {\n    const card = this.props.card;\n    let color = card.isOpened() ? card.getColor() : 'black';\n    let cardOnclick = card.isOpened()\n      ? this.props.onClick\n      : this.props.onClickClosedCard;\n\n    const style = { color };\n    let className = 'card-container';\n\n    if (this.isNullCard()) {\n      className += ' null-card';\n      style.color = '#055b45';\n      cardOnclick = this.props.nullCardOnClick;\n    }\n\n    if (this.props.isSelected) {\n      className += ' selected-card';\n    }\n\n    return (\n      <div\n        className={className}\n        style={style}\n        id={this.props.id}\n        onClick={cardOnclick}\n      >\n        {String.fromCodePoint(this.getUnicode())}\n      </div>\n    );\n  }\n}\n\nexport default CardView;\n","import React from 'react';\nimport CardView from './cardview';\nimport Card from './models/card';\n\nclass PileView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  isPileEmpty() {\n    return this.props.pile.length == 0;\n  }\n\n  render() {\n    const pile = this.props.pile;\n    if (this.isPileEmpty()) {\n      const nullCard = new Card('', 0);\n      pile.push(nullCard);\n    }\n\n    const cardViews = pile.map(card => {\n      const id = `${card.getSuite()}_${card.getNumber()}_${this.props.id}`;\n\n      const isSelected = id == this.props.lastSelectedCard;\n      return (\n        <CardView\n          card={card}\n          key={id}\n          id={id}\n          onClick={this.props.cardOnClick}\n          onClickClosesCard={null}\n          nullCardOnClick={this.props.cardOnClick}\n          isSelected={isSelected}\n        />\n      );\n    });\n    return <div className=\"pile\">{cardViews}</div>;\n  }\n}\n\nexport default PileView;\n","import React from 'react';\nimport CardView from './cardview';\nimport _ from 'lodash';\n\nclass WastePileView extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  getCardId(card) {\n    return `${card.getSuite()}_${card.getNumber()}_${this.props.id}`;\n  }\n\n  render() {\n    const allCards = this.props.cards;\n    const lastOpenedCard = _.last(allCards.openedCards);\n    const lastClosedCard = _.last(allCards.closedCards);\n\n    const lastOpenedCardId = this.getCardId(lastOpenedCard);\n    const isSelected = lastOpenedCardId == this.props.lastSelectedCard;\n\n    return (\n      <div style={{ display: 'flex', marginLeft: '45px' }}>\n        <div style={{ marginRight: '10px' }}>\n          <CardView\n            card={lastClosedCard}\n            onClickClosedCard={this.props.onClickDeck}\n            nullCardOnClick={this.props.onClickEmptyDeck}\n          />\n        </div>\n        <div>\n          <CardView\n            card={lastOpenedCard}\n            id={lastOpenedCardId}\n            key={lastOpenedCardId}\n            onClick={this.props.onClickedWastePileOpenedCard}\n            nullCardOnClick={null}\n            isSelected={isSelected}\n          />\n        </div>\n        <div />\n      </div>\n    );\n  }\n}\n\nexport default WastePileView;\n","import React from 'react';\nimport _ from 'lodash';\nimport CardView from './cardview';\n\nclass FoundationPile extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { pile } = this.props;\n    const topCard = _.last(pile);\n    return (\n      <div style={{ marginRight: '10px' }}>\n        <CardView\n          card={topCard}\n          id={this.props.id}\n          nullCardOnClick={this.props.onClickFoundationPile}\n          onClick={this.props.onClickFoundationPile}\n        />\n      </div>\n    );\n  }\n}\n\nexport default FoundationPile;\n","import React from 'react';\nimport FoundationPile from './foundation_pile';\n\nclass FoundationPiles extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const { piles } = this.props;\n\n    const foundationPileViews = piles.map((pile, index) => {\n      return (\n        <FoundationPile\n          pile={pile}\n          id={index}\n          key={index}\n          onClickFoundationPile={this.props.onClickFoundationPile}\n        />\n      );\n    });\n\n    return (\n      <div style={{ display: 'flex', marginRight: '25px' }}>\n        {foundationPileViews}\n      </div>\n    );\n  }\n}\n\nexport default FoundationPiles;\n","import React from 'react';\nimport Deck from './models/deck';\nimport _ from 'lodash';\nimport PileView from './pileview';\nimport Card from './models/card';\nimport WastePileView from './waste_pile_view';\nimport FoundationPiles from './foundation_piles';\n\nclass GameView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: Deck.create(),\n      lastSelectedCardId: null,\n      wastePileCards: { openedCards: [], closedCards: [] },\n      foundationPiles: []\n    };\n  }\n\n  initializePiles() {\n    this.setState(state => {\n      const piles = new Array(7);\n      for (let pileNumber = 0; pileNumber < piles.length; pileNumber++) {\n        piles[pileNumber] = state.deck.take(pileNumber + 1);\n        this.openLastCardOfPile(piles[pileNumber]);\n      }\n      return { ...state, piles };\n    });\n  }\n\n  initializeWastePile() {\n    this.setState(state => {\n      const nullCard = new Card('', 0);\n      const openedCards = [nullCard];\n\n      let closedCards = [nullCard];\n      closedCards = closedCards.concat(state.deck.takeAll());\n\n      return { ...state, wastePileCards: { openedCards, closedCards } };\n    });\n  }\n\n  initializeFoundationPiles() {\n    this.setState(state => {\n      state.foundationPiles = new Array(4).fill(null).map(e => {\n        return new Array(1).fill(new Card('', 0));\n      });\n    });\n  }\n\n  componentWillMount() {\n    this.initializePiles();\n    this.initializeWastePile();\n    this.initializeFoundationPiles();\n  }\n\n  isACardAlreadySelected() {\n    return this.state.lastSelectedCardId != null;\n  }\n\n  areOfDifferentColors(card1, card2) {\n    return card1.getColor() !== card2.getColor();\n  }\n\n  doesCardMatch(card, rankToMatchWith, suiteToMatchWith) {\n    return (\n      card.getSuite() == suiteToMatchWith && card.getNumber() == rankToMatchWith\n    );\n  }\n\n  isCardMoveable(targetCard, lastSelectedCard) {\n    const isAlternateCard =\n      this.areOfDifferentColors(targetCard, lastSelectedCard) &&\n      targetCard.getNumber() == lastSelectedCard.getNumber() + 1;\n\n    const isLastCardKing = lastSelectedCard.isKing();\n    const isKingOnEmptyPile = targetCard.isNullCard() && isLastCardKing;\n    return isAlternateCard || isKingOnEmptyPile;\n  }\n\n  openLastCardOfPile(pile) {\n    const lastCard = _.last(pile);\n    if (lastCard == undefined) {\n      return;\n    }\n    lastCard.open();\n  }\n\n  getIndexOfCardInPile(card, pile) {\n    return _.findIndex(pile, _card => card.equals(_card));\n  }\n\n  removeCardsInPileFrom(card, pile) {\n    const indexOfCard = this.getIndexOfCardInPile(card, pile);\n    return _.remove(pile, (card, index) => index >= indexOfCard);\n  }\n\n  removeNullCard(cards) {\n    const nullCard = new Card('', 0);\n    _.remove(cards, card => card.equals(nullCard));\n  }\n\n  isLastSelectedCardInWastePile() {\n    return this.state.lastSelectedCardSource == 'WASTE_PILE';\n  }\n\n  moveCardFromWastePileTo(pile, card) {\n    const lastSelectedCard = _.last(this.state.wastePileCards.openedCards);\n\n    if (this.isCardMoveable(card, lastSelectedCard)) {\n      this.state.wastePileCards.openedCards.pop();\n      pile.push(lastSelectedCard);\n      this.removeNullCard(pile);\n    }\n  }\n\n  isLargeSelectedCardInTableau() {\n    return !this.isLastSelectedCardInWastePile();\n  }\n\n  canCardBeMovedToFoudationPile(\n    foundationPileId,\n    cardToMovePileId,\n    cardToMove\n  ) {\n    const cardToMovePile = this.state.piles[cardToMovePileId];\n    const isCardToMoveOnTopOfPile = _.last(cardToMovePile).equals(cardToMove);\n\n    if (!isCardToMoveOnTopOfPile) return false;\n\n    const foundatioPile = this.state.foundationPiles[foundationPileId];\n    const topCard = _.last(foundatioPile);\n    if (topCard.isNullCard() && cardToMove.isAce()) return true;\n\n    const isRankOneMoreThanTopCard =\n      topCard.getNumber() == cardToMove.getNumber() - 1;\n    const isOfSameSuite = topCard.getSuite() == cardToMove.getSuite();\n    if (isRankOneMoreThanTopCard && isOfSameSuite) return true;\n\n    return false;\n  }\n\n  moveCardToFoundationFile(foundationPileId, cardToMovePileId, cardToMove) {\n    this.setState(state => {\n      const cardToMovePile = state.piles[cardToMovePileId];\n      cardToMovePile.pop();\n\n      const foundatioPile = state.foundationPiles[foundationPileId];\n      foundatioPile.push(cardToMove);\n      return state;\n    });\n  }\n\n  onClickFoundationPile(event) {\n    if (!this.isACardAlreadySelected()) return;\n    if (!this.isLargeSelectedCardInTableau()) return;\n\n    const foundationPileId = event.target.id;\n\n    const [\n      cardToMoveSuite,\n      cardToMoveRank,\n      cardToMovePileId\n    ] = this.state.lastSelectedCardId.split('_');\n\n    const cardToMove = this.findCardInTableauPile(\n      cardToMovePileId,\n      cardToMoveRank,\n      cardToMoveSuite\n    );\n    if (\n      this.canCardBeMovedToFoudationPile(\n        foundationPileId,\n        cardToMovePileId,\n        cardToMove\n      )\n    ) {\n      this.moveCardToFoundationFile(\n        foundationPileId,\n        cardToMovePileId,\n        cardToMove\n      );\n\n      this.setState(state => {\n        this.openLastCardOfPile(state.piles[cardToMovePileId]);\n        return { ...state, lastSelectedCardId: null };\n      });\n    }\n  }\n\n  findCardInTableauPile(pileId, cardRank, cardSuite) {\n    return this.state.piles[pileId].find(card => {\n      return this.doesCardMatch(card, cardRank, cardSuite);\n    });\n  }\n\n  moveCards(targetId, lastSelectedCardId) {\n    const [targetCardSuite, targetCardRank, targetPileId] = targetId.split('_');\n    const [lastCardSuite, lastCardRank, lastPileId] = lastSelectedCardId.split(\n      '_'\n    );\n\n    const piles = [...this.state.piles];\n    const lastSelectedCardPile = piles[lastPileId];\n    const targetPile = piles[targetPileId];\n\n    const targetCard = this.findCardInTableauPile(\n      targetPileId,\n      targetCardRank,\n      targetCardSuite\n    );\n\n    if (this.isLastSelectedCardInWastePile()) {\n      this.moveCardFromWastePileTo(targetPile, targetCard);\n      return piles;\n    }\n\n    const lastSelectedCard = this.findCardInTableauPile(\n      lastPileId,\n      lastCardRank,\n      lastCardSuite\n    );\n\n    if (!this.isCardMoveable(targetCard, lastSelectedCard)) {\n      return piles;\n    }\n\n    this.removeNullCard(targetPile);\n\n    const removedCards = this.removeCardsInPileFrom(\n      lastSelectedCard,\n      lastSelectedCardPile\n    );\n\n    piles[targetPileId] = targetPile.concat(removedCards);\n\n    this.openLastCardOfPile(lastSelectedCardPile);\n    return piles;\n  }\n\n  onClickTableauCard(event) {\n    const targetId = event.target.id;\n\n    if (this.isACardAlreadySelected()) {\n      const lastSelectedCardId = this.state.lastSelectedCardId;\n\n      const pilesWithMovedCards = this.moveCards(targetId, lastSelectedCardId);\n      this.setState(state => {\n        return {\n          ...state,\n          piles: pilesWithMovedCards,\n          lastSelectedCardId: null\n        };\n      });\n      return;\n    }\n\n    this.setState(state => {\n      return {\n        ...state,\n        lastSelectedCardId: targetId,\n        lastSelectedCardSource: 'TABLEAU_PILE'\n      };\n    });\n  }\n\n  onClickDeck() {\n    this.setState(state => {\n      const cardToOpen = state.wastePileCards.closedCards.pop();\n      cardToOpen.open();\n      state.wastePileCards.openedCards.push(cardToOpen);\n      return state;\n    });\n  }\n\n  onClickEmptyDeck() {\n    this.setState(state => {\n      const openedCards = state.wastePileCards.openedCards;\n      const closedCards = openedCards\n        .splice(1, openedCards.length)\n        .map(card => {\n          card.close();\n          return card;\n        })\n        .reverse();\n\n      state.wastePileCards.closedCards = state.wastePileCards.closedCards.concat(\n        closedCards\n      );\n\n      return state;\n    });\n  }\n\n  onClickedWastePileOpenedCard(event) {\n    this.setState({\n      ...this.state,\n      lastSelectedCardId: event.target.id,\n      lastSelectedCardSource: 'WASTE_PILE'\n    });\n  }\n\n  render() {\n    const { piles } = this.state;\n\n    return (\n      <div>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            marginTop: '120px'\n          }}\n        >\n          <WastePileView\n            cards={this.state.wastePileCards}\n            lastSelectedCard={this.state.lastSelectedCardId}\n            onClickDeck={this.onClickDeck.bind(this)}\n            onClickEmptyDeck={this.onClickEmptyDeck.bind(this)}\n            onClickedWastePileOpenedCard={this.onClickedWastePileOpenedCard.bind(\n              this\n            )}\n          />\n          <FoundationPiles\n            piles={this.state.foundationPiles}\n            onClickFoundationPile={this.onClickFoundationPile.bind(this)}\n          />\n        </div>\n        <div className=\"tableau\">\n          {piles.map((pile, index) => {\n            return (\n              <PileView\n                pile={pile}\n                id={index}\n                key={index}\n                cardOnClick={this.onClickTableauCard.bind(this)}\n                lastSelectedCard={this.state.lastSelectedCardId}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GameView;\n","import React, { Component } from 'react';\nimport GameView from './game_view';\n\nclass App extends Component {\n  render() {\n    return <GameView />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}